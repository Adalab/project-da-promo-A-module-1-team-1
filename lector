import os


def lector():
    # La carpeta donde vamos a meter los archivos a leer debería eliminarse al final de cada uso del programa, por lo tanto se crearía cada vez.

    # INICIO
    print("¡Hola! Con este programa vamos a preparar tu archivo .txt para que sea exportable a MySQL. Por favor, sigue las instrucciones:")

    origen = input(
        "Pega aquí la ruta completa (incluido el nombre del archivo) del archivo a tratar:")
    destino = input(
        "Pega aquí la ruta de la carpeta donde quieres que te dejemos el archivo una vez esté preparado:")
    # [!] Comprobar si la ruta es válida.

    # DE LA RUTA ORIGEN, COGEMOS SOLO LA PARTE FINAL: EL NOMBRE
    archivo = os.path.basename(origen)

    # CREAMOS NUESTRA CARPETA DE TRABAJO EN EL DESTINO ELEGIDO (SI NO EXISTE YA)

    os.chdir(destino)
    if os.listdir("limpieza_proyecto"):
        pass
    else:
        os.mkdir("./limpieza_proyecto")

    os.chdir("./limpieza_proyecto")
    carpeta = destino + "/limpieza_proyecto"

    if os.listdir(archivo):
        pass
    else:
        os.rename(origen, carpeta)

    # os.open()
    # os.read()
    
#os.getcwd        
nombre_archivo = 'data.txt'
ubicacion_carpeta = '/home/adalaber/Escritorio/limpieza_proyecto'
ubicacion_archivo = ubicacion_carpeta + '/' + nombre_archivo
print(ubicacion_archivo)

f = open(ubicacion_archivo)
print(f.read())
f.close()

# Corrección de fallos:
#utilizar métodos strings para los errores que ha dicho Alejandro.
#acortar espacios, cambiar errores por null, cambiar los null por espacio vacio... 

        limpieza_comas = "   ,"
        for comas in range(len(limpieza_comas)):
            comas = _1.replace("  ,",",")
            print(comas)
            
        limpieza_errores = 'error'
        for error in range(len(limpieza_errores)):
            error = _1.replace('error', 'null')
            print(error)

        limpieza_null = "null"
        for null in range(len(limpieza_null)):
            null = _1.replace("null", "[]")
            print(null)

#buscar string que cumplan el patron como el de 'level' con finditer() = match object (meter en el bucle)
#si son todos iguales, crear una lista y eliminarla

    # Corrección de fallos (...) y guardado de resultados en archivo_limpio.sql
    # fichero arreglado en ../limpieza_proyecto
    # os.rmdir("/limpieza_proyecto") (carpeta temporal)


lector()

# "/home/adalaber/Escritorio/limpieza_proyecto/datos.txt"
